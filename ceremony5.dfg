begin_problem(formal_model).

list_of_descriptions.
name({*SPASS for DA Model*}).
author({*Taciane*}).
status(satisfiable).
description({* Logic Model for Security Ceremonies *}).
end_of_list.

list_of_symbols.
functions[

%Ceremony-specific constants

(ma1,0),
(dy,0),
(da1,0),
(da2,0),
(da3,0),
(s,0),
(up,0),
(uc,0),
(emailserverurl,0),
(keys,0),
(emailloginpage,0),
(email,0),
(password,0),
(2stepverification,0),
(codemessage,0),
(authenticationcode,0),
(usersemailpage,0),

(sent,3), %(sender, receiver, message)
(pair,2),
(encr,2), %(message, key)
(hash,1)

].

predicates[
(Agent,1),
(L3_Sender,3), %(sender, receiver, message)
(L2_Sender,3),
(L1_Sender,3),
(Attacker,1),
(L1_WasBlocked,3), %(receiver, message, attacker)
(L2_WasBlocked,3),
(L3_WasBlocked,3),
(Knows,2), %(agent, knowledge)
(KnowsPair,2),
(KnowsEncr,2),
(Honest,1), %attackers are not honest
(Key,1),
(Function,1),

%Attacker types
(DY,1), %Dolev-Yao  - identifier (all capabilities included by default)
(DA,1), %Distributed Attacker - identifier
(MA,1), %Multi-Attacker - identifier

%Security concertina layers
(L3_N,1),
(L3_E,2), %eavesdrop - feasible
(L3_B,2), %block - feasible
(L3_S,2), %spoof - only if device left unblocked and unattended
(L3_I,2), %initiate - same condition as spoof
(L3_C,2), %crypto - same condition as spoof
(L3_O,2), %re-order same condition as spoof
(L3_F,2), %fabricate - same condition as spoof

(L2_N,1),
(L2_E,2),
(L2_B,2),
(L2_S,2),
(L2_I,2),
(L2_C,2),
(L2_O,2),
(L2_F,2),

%DY capabilities
(L1_E,2),
(L1_B,2),
(L1_S,2),
(L1_I,2),
(L1_C,2),
(L1_O,2),
(L1_F,2)

].

end_of_list.


list_of_formulae(axioms).

%---- Atomic Break Down (A) ------------------------------------------

formula( forall([xa, xm1, xm2],
	implies(
		and(
			Agent(xa),
			KnowsPair(xa,pair(xm1,xm2))
		),
		and(
			Knows(xa, xm1),
			Knows(xa, xm2)
		)
	)),
Atomic_break_down_pair).


%---- Concatenate ----------------------------------------------------

formula( forall([xa, xm1, xm2],
	implies(
		and(
			Agent(xa),
			Knows(xa, xm1),
			Knows(xa, xm2)
		),
		KnowsPair(xa,pair(xm1,xm2))
	)),
Concatenate_pair).


%---- Communication --------------------------------------------------

formula( forall([xa, xm, xkey],
	implies(
		and(
			Agent(xa),
			Knows(xa,xm),
			Key(xkey),
			Knows(xa,xkey)
		),
		KnowsEncr(xa, encr(xm,xkey))
	)),
Encryption).


formula( forall([xa, xm, xkey],
	implies(
		and(
			Agent(xa),
			Key(xkey),
			Knows(xa,xkey),
			KnowsEncr(xa, encr(xm,xkey))
		),
		Knows(xa,xm)
	)),
Decryption).


formula( forall([xa, xm1,xm2, xkey],
	implies(
		and(
			Agent(xa),
			KnowsPair(xa,pair(xm1,xm2)),
			Key(xkey),
			Knows(xa,xkey)
		),
		KnowsEncr(xa, encr(pair(xm1,xm2),xkey))
	)),
Encryption_Pair).


formula( forall([xa, xm1, xm2, xkey],
	implies(
		and(
			Agent(xa),
			Key(xkey),
			Knows(xa,xkey),
			KnowsEncr(xa, encr(pair(xm1,xm2),xkey))
		),
		KnowsPair(xa,pair(xm1,xm2))
	)),
Decryption_Pair).


% ---------------------------------------------------------------------

%Eavesdrop
formula( forall([xa, xb, xatt, xm],
	implies(
		and(
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Attacker(xatt),
			Knows(xa, xm),
			L3_E(sent(xa,xb,xm),xatt)
		),
		and(
			Knows(xb, xm),
			Knows(xatt, xm),
			L3_Sender(xa,xb,xm)
		)
	)),
Eavesdrop_L3).


formula( forall([xa, xb, xatt, xm1, xm2],
	implies(
		and(
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Attacker(xatt),
			KnowsPair(xa, pair(xm1,xm2)),
			L3_E(sent(xa,xb,pair(xm1,xm2)),xatt)
		),
		and(
			KnowsPair(xb, pair(xm1,xm2)),
			KnowsPair(xatt, pair(xm1,xm2)),
			L3_Sender(xa,xb,pair(xm1,xm2))
		)
	)),
Eavesdrop_L3_Pair).


formula( forall([xa, xb, xatt, xm],
	implies(
		and(
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Attacker(xatt),
			Knows(xa, xm),
			L2_E(sent(xa,xb,xm),xatt)
		),
		and(
			Knows(xb, xm),
			Knows(xatt, xm),
			L2_Sender(xa,xb,xm)
		)
	)),
Eavesdrop_L2).


formula( forall([xa, xb, xatt, xm1, xm2],
	implies(
		and(
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Attacker(xatt),
			KnowsPair(xa, pair(xm1,xm2)),
			L2_E(sent(xa,xb,pair(xm1,xm2)),xatt)
		),
		and(
			KnowsPair(xb, pair(xm1,xm2)),
			KnowsPair(xatt, pair(xm1,xm2)),
			L2_Sender(xa,xb,pair(xm1,xm2))
		)
	)),
Eavesdrop_L2_Pair).


formula( forall([xa, xb, xatt, xm],
	implies(
		and(
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Attacker(xatt),
			Knows(xa, xm),
			L1_E(sent(xa,xb,xm),xatt)
		),
		and(
			Knows(xb, xm),
			Knows(xatt, xm),
			L1_Sender(xa,xb,xm)
		)
	)),
Eavesdrop_L1).


formula( forall([xa, xb, xatt, xm1, xm2],
	implies(
		and(
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Attacker(xatt),
			KnowsPair(xa, pair(xm1,xm2)),
			L1_E(sent(xa,xb,pair(xm1,xm2)),xatt)
		),
		and(
			KnowsPair(xb, pair(xm1,xm2)),
			KnowsPair(xatt, pair(xm1,xm2)),
			L1_Sender(xa,xb,pair(xm1,xm2))
		)
	)),
Eavesdrop_L1_Pair).


formula( forall([xa, xb, xatt, xm, xkey],
	implies(
		and(
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Attacker(xatt),
			Knows(xa,xm),
			Knows(xa,xkey),
			Key(xkey),
			L1_E(sent(xa,xb,encr(xm,xkey)),xatt)
		),
		and(
			KnowsEncr(xb,encr(xm,xkey)),
			KnowsEncr(xatt,encr(xm,xkey)),
			L1_Sender(xa,xb,encr(xm,xkey))
		)
	)),
Eavesdrop_L1_Encr).


formula( forall([xa, xb, xatt, xm1, xm2, xkey],
	implies(
		and(
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Attacker(xatt),
			KnowsPair(xa,pair(xm1,xm2)),
			Knows(xa,xkey),
			Key(xkey),
			L1_E(sent(xa,xb,encr(pair(xm1,xm2),xkey)),xatt)
		),
		and(
			KnowsEncr(xb,encr(pair(xm1,xm2),xkey)),
			KnowsEncr(xatt,encr(pair(xm1,xm2),xkey)),
			L1_Sender(xa,xb,encr(pair(xm1,xm2),xkey))
		)
	)),
Eavesdrop_L1_Encr_Pair).

% --------------------------------------------------------------------------

%Block

formula( forall([xa, xb, xatt, xm],
	implies(
		and(
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Attacker(xatt),
			Knows(xa, xm),
			L3_B(sent(xa,xb,xm),xatt)
		),
		and(
			L3_WasBlocked(xb, xm, xatt),
			Knows(xatt,xm),
			L3_Sender(xa,xb,xm)
		)
	)),
Block_L3).


formula( forall([xa, xb, xatt, xm1, xm2],
	implies(
		and(
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Attacker(xatt),
			KnowsPair(xa, pair(xm1,xm2)),
			L3_B(sent(xa,xb,pair(xm1,xm2)),xatt)
		),
		and(
			L3_WasBlocked(xb, pair(xm1,xm2), xatt),
			KnowsPair(xatt,pair(xm1,xm2)),
			L3_Sender(xa,xb,pair(xm1,xm2))
		)
	)),
Block_L3_Pair).


formula( forall([xa, xb, xatt, xm],
	implies(
		and(
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Attacker(xatt),
			Knows(xa, xm),
			L2_B(sent(xa,xb,xm),xatt)
		),
		and(
			L2_WasBlocked(xb, xm, xatt),
			Knows(xatt,xm),
			L2_Sender(xa,xb,xm)
		)
	)),
Block_L2).


formula( forall([xa, xb, xatt, xm1, xm2],
	implies(
		and(
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Attacker(xatt),
			KnowsPair(xa, pair(xm1,xm2)),
			L2_B(sent(xa,xb,pair(xm1,xm2)),xatt)
		),
		and(
			L2_WasBlocked(xb, pair(xm1,xm2), xatt),
			KnowsPair(xatt,pair(xm1,xm2)),
			L2_Sender(xa,xb,pair(xm1,xm2))
		)
	)),
Block_L2_Pair).


formula( forall([xa, xb, xatt, xm],
	implies(
		and(
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Attacker(xatt),
			Knows(xa, xm),
			L1_B(sent(xa,xb,xm),xatt)
		),
		and(
			L1_WasBlocked(xb, xm, xatt),
			Knows(xatt,xm),
			L1_Sender(xa,xb,xm)
		)
	)),
Block_L1).


formula( forall([xa, xb, xatt, xm1, xm2],
	implies(
		and(
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Attacker(xatt),
			KnowsPair(xa, pair(xm1,xm2)),
			L1_B(sent(xa,xb,pair(xm1,xm2)),xatt)
		),
		and(
			L1_WasBlocked(xb, pair(xm1,xm2), xatt),
			KnowsPair(xatt,pair(xm1,xm2)),
			L1_Sender(xa,xb,pair(xm1,xm2))
		)
	)),
Block_L1_Pair).


formula( forall([xa, xb, xatt, xm, xkey],
	implies(
		and(
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Attacker(xatt),
			Knows(xa,xm),
			Knows(xa,xkey),
			Key(xkey),
			L1_B(sent(xa,xb,encr(xm,xkey)),xatt)
		),
		and(
			L1_WasBlocked(xb, encr(xm,xkey), xatt),
			KnowsEncr(xatt,encr(xm,xkey)),
			L1_Sender(xa,xb,encr(xm,xkey))
		)
	)),
Block_L1_Encr).


formula( forall([xa, xb, xatt, xm1, xm2, xkey],
	implies(
		and(
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Attacker(xatt),
			KnowsPair(xa,pair(xm1,xm2)),
			Knows(xa,xkey),
			Key(xkey),
			L1_B(sent(xa,xb,encr(pair(xm1,xm2),xkey)),xatt)
		),
		and(
			L1_WasBlocked(xb, encr(pair(xm1,xm2),xkey), xatt),
			KnowsEncr(xatt,encr(pair(xm1,xm2),xkey)),
			L1_Sender(xa,xb,encr(pair(xm1,xm2),xkey))
		)
	)),
Block_L1_Encr_Pair).

% -------------------------------------------------------------------------

%Spoof
formula( forall([xa, xb, xm, xatt],
	implies(
		and(
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Attacker(xatt),
			Knows(xatt,xm)
		),
		and(
			L3_S(sent(xa,xb,xm), xatt),
			Knows(xb,xm),
			L3_Sender(xatt,xb,xm)
		)
	)),
Spoof_L3).


formula( forall([xa, xb, xm1, xm2, xatt],
	implies(
		and(
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Attacker(xatt),
			KnowsPair(xatt,pair(xm1,xm2))
		),
		and(
			L3_S(sent(xa,xb,pair(xm1,xm2)), xatt),
			KnowsPair(xb,pair(xm1,xm2)),
			L3_Sender(xatt,xb,pair(xm1,xm2))
		)
	)),
Spoof_L3_Pair).


formula( forall([xa, xb, xm, xatt],
	implies(
		and(
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Attacker(xatt),
			Knows(xatt,xm)
		),
		and(
			L2_S(sent(xa,xb,xm), xatt),
			Knows(xb,xm),
			L2_Sender(xatt,xb,xm)
		)
	)),
Spoof_L2).


formula( forall([xa, xb, xm1, xm2, xatt],
	implies(
		and(
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Attacker(xatt),
			KnowsPair(xatt,pair(xm1,xm2))
		),
		and(
			L2_S(sent(xa,xb,pair(xm1,xm2)), xatt),
			KnowsPair(xb,pair(xm1,xm2)),
			L2_Sender(xatt,xb,pair(xm1,xm2))
		)
	)),
Spoof_L2_pair).


formula( forall([xa, xb, xm, xatt],
	implies(
		and(
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Attacker(xatt),
			Knows(xatt,xm)
		),
		and(
			L1_S(sent(xa,xb,xm), xatt),
			Knows(xb,xm),
			L1_Sender(xatt,xb,xm)
		)
	)),
Spoof_L1).


formula( forall([xa, xb, xm1, xm2, xatt],
	implies(
		and(
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Attacker(xatt),
			KnowsPair(xatt,pair(xm1,xm2))
		),
		and(
			L1_S(sent(xa,xb,pair(xm1,xm2)), xatt),
			KnowsPair(xb,pair(xm1,xm2)),
			L1_Sender(xatt,xb,pair(xm1,xm2))
		)
	)),
Spoof_L1_Pair).


formula( forall([xa, xb, xm, xatt, xkey],
	implies(
		and(
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Attacker(xatt),
			Knows(xa,xm),
			Knows(xa,xkey),
			Key(xkey),
			L1_E(sent(xa,xb,encr(xm,xkey)),xatt)
		),
		and(
			L1_S(sent(xa,xb,encr(xm,xkey)), xatt),
			KnowsEncr(xb,encr(xm,xkey)),
			L1_Sender(xatt,xb,encr(xm,xkey))
		)
	)),
Spoof_L1_Encr).


formula( forall([xa, xb, xm1, xm2, xatt, xkey],
	implies(
		and(
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Attacker(xatt),
			KnowsPair(xa,pair(xm1,xm2)),
			Knows(xa,xkey),
			Key(xkey),
			L1_E(sent(xa,xb,encr(pair(xm1,xm2),xkey)),xatt)
		),
		and(
			L1_S(sent(xa,xb,encr(pair(xm1,xm2),xkey)), xatt),
			KnowsEncr(xb,encr(pair(xm1,xm2),xkey)),
			L1_Sender(xatt,xb,encr(pair(xm1,xm2),xkey))
		)
	)),
Spoof_L1_Encr_Pair).


% ----------------------------------------------------------------------

%Initiate
formula( forall ([xatt, xb, xm],
	implies(
		and(
			Attacker(xatt),
			Agent(xb),
			Honest(xb),
			Knows(xatt, xm)
		),
		and(
			L3_I(sent(xatt, xb, xm),xatt),
			Knows(xb,xm),
			L3_Sender(xatt,xb,xm)
		)
	)),
Initiate_L3).


formula( forall ([xatt, xb, xm1, xm2],
	implies(
		and(
			Attacker(xatt),
			Agent(xb),
			Honest(xb),
			KnowsPair(xatt, pair(xm1,xm2))
		),
		and(
			L3_I(sent(xatt, xb, pair(xm1,xm2)),xatt),
			KnowsPair(xb,pair(xm1,xm2)),
			L3_Sender(xatt,xb,pair(xm1,xm2))
		)
	)),
Initiate_L3_Pair).


formula( forall ([xatt, xb, xm],
	implies(
		and(
			Attacker(xatt),
			Agent(xb),
			Honest(xb),
			Knows(xatt, xm)
		),
		and(
			L2_I(sent(xatt, xb, xm),xatt),
			Knows(xb,xm),
			L2_Sender(xatt,xb,xm)
		)
	)),
Initiate_L2).


formula( forall ([xatt, xb, xm1, xm2],
	implies(
		and(
			Attacker(xatt),
			Agent(xb),
			Honest(xb),
			KnowsPair(xatt, pair(xm1,xm2))
		),
		and(
			L2_I(sent(xatt, xb, pair(xm1,xm2)),xatt),
			KnowsPair(xb,pair(xm1,xm2)),
			L2_Sender(xatt,xb,pair(xm1,xm2))
		)
	)),
Initiate_L2_Pair).


formula( forall ([xatt, xb, xm],
	implies(
		and(
			Attacker(xatt),
			Agent(xb),
			Honest(xb),
			Knows(xatt, xm)
		),
		and(
			L1_I(sent(xatt, xb, xm),xatt),
			Knows(xb,xm),
			L1_Sender(xatt,xb,xm)
		)
	)),
Initiate_L1).


formula( forall ([xatt, xb, xm1, xm2],
	implies(
		and(
			Attacker(xatt),
			Agent(xb),
			Honest(xb),
			KnowsPair(xatt,pair(xm1,xm2))
		),
		and(
			L1_I(sent(xatt, xb, pair(xm1,xm2)),xatt),
			KnowsPair(xb,pair(xm1,xm2)),
			L1_Sender(xatt,xb,pair(xm1,xm2))
		)
	)),
Initiate_L1_Pair).


formula( forall ([xatt, xb, xm, xkey],
	implies(
		and(
			Attacker(xatt),
			Agent(xb),
			Honest(xb),
			Knows(xatt,xm),
			Knows(xatt,xkey),
			Key(xkey)
		),
		and(
			L1_I(sent(xatt, xb, encr(xm,xkey)),xatt),
			KnowsEncr(xb,encr(xm,xkey)),
			L1_Sender(xatt,xb,encr(xm,xkey))
		)
	)),
Initiate_L1_Encr).


formula( forall ([xatt, xb, xm1, xm2, xkey],
	implies(
		and(
			Attacker(xatt),
			Agent(xb),
			Honest(xb),
			KnowsPair(xatt,pair(xm1,xm2)),
			Knows(xatt,xkey),
			Key(xkey)
		),
		and(
			L1_I(sent(xatt, xb, encr(pair(xm1,xm2),xkey)),xatt),
			KnowsEncr(xb,encr(pair(xm1,xm2),xkey)),
			L1_Sender(xatt,xb,encr(pair(xm1,xm2),xkey))
		)
	)),
Initiate_L1_Encr_Pair).

% ------------------------------------------------------------------------

%Crypto - nothing more than Eavesdrop and Decrypt

formula( forall([xa, xb, xatt, xm, xkey],
	implies(
		and(
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Attacker(xatt),
			Knows(xa,xm),
			Key(xkey),
			Knows(xa,xkey),
			Knows(xatt,xkey),
			L3_C(sent(xa,xb,encr(xm,xkey)),xatt)
		),
		and(
			Knows(xatt, xm),
			KnowsEncr(xb,encr(xm,xkey)),
			L3_Sender(xa,xb,xm)
		)
	)),
Crypto_L3).


formula( forall([xa, xb, xatt, xm1, xm2, xkey],
	implies(
		and(
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Attacker(xatt),
			Knows(xa,xkey),
			KnowsPair(xa,pair(xm1,xm2)),
			Knows(xatt,xkey),
			Key(xkey),
			L3_C(sent(xa,xb,encr(pair(xm1,xm2),xkey)),xatt)
		),
		and(
			KnowsPair(xatt, pair(xm1,xm2)),
			KnowsEncr(xb,encr(pair(xm1,xm2),xkey)),
			L3_Sender(xa,xb,pair(xm1,xm2))
		)
	)),
Crypto_L3_Pair).


formula( forall([xa, xb, xatt, xm, xkey],
	implies(
		and(
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Attacker(xatt),
			Knows(xa,xm),
			Knows(xa,xkey),
			Knows(xatt,xkey),
			Key(xkey),
			L2_C(sent(xa,xb,encr(xm,xkey)),xatt)
		),
		and(
			Knows(xatt, xm),
			KnowsEncr(xb,encr(xm,xkey)),
			L2_Sender(xa,xb,xm)
		)
	)),
Crypto_L2).


formula( forall([xa, xb, xatt, xm1, xm2, xkey],
	implies(
		and(
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Attacker(xatt),
			Knows(xa,xkey),
			KnowsPair(xa,pair(xm1,xm2)),
			Knows(xatt,xkey),
			Key(xkey),
			L2_C(sent(xa,xb,encr(pair(xm1,xm2),xkey)),xatt)
		),
		and(
			KnowsPair(xatt, pair(xm1,xm2)),
			KnowsEncr(xb,encr(pair(xm1,xm2),xkey)),
			L2_Sender(xa,xb,pair(xm1,xm2))
		)
	)),
Crypto_L2_Pair).


formula( forall([xa, xb, xatt, xm, xkey],
	implies(
		and(
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Attacker(xatt),
			Knows(xa,xkey),
			Knows(xa,xm),
			Knows(xatt,xkey),
			Key(xkey),
			L1_C(sent(xa,xb,encr(xm,xkey)),xatt)
		),
		and(
			Knows(xatt, xm),
			KnowsEncr(xb,encr(xm,xkey)),
			L1_Sender(xa,xb,xm)
		)
	)),
Crypto_L1).


formula( forall([xa, xb, xatt, xm1, xm2, xkey],
	implies(
		and(
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Attacker(xatt),
			Knows(xa,xkey),
			KnowsPair(xa,pair(xm1,xm2)),
			Knows(xatt,xkey),
			Key(xkey),
			L1_C(sent(xa,xb,encr(pair(xm1,xm2),xkey)),xatt)
		),
		and(
			KnowsPair(xatt, pair(xm1,xm2)),
			KnowsEncr(xb,encr(pair(xm1,xm2),xkey)),
			L1_Sender(xa,xb,pair(xm1,xm2))
		)
	)),
Crypto_L1_Pair).


% ----------------------------------------------------------------------------------------

%ReOrder
formula( forall ([xatt, xa, xb, xm1, xm2],
	implies(
		and(
			Attacker(xatt),
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Knows(xa, xm1),
			Knows(xa, xm2),
			L3_O(sent(xa, xb, xm1), xatt),
			implies(
				L3_O(sent(xa, xb, xm1), xatt),
				L3_O(sent(xa, xb, xm2), xatt))
		),
		and(
			Knows(xatt,xm1),
			Knows(xatt,xm2),
			Knows(xb,xm2),
			implies(
				Knows(xb, xm2),
				Knows(xb, xm1)),
			L3_Sender(xa,xb,xm1),
			L3_Sender(xa,xb,xm2)
		)
	)),
ReOrder_L3).


formula( forall ([xatt, xa, xb, xm1, xm2],
	implies(
		and(
			Attacker(xatt),
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Knows(xa, xm1),
			Knows(xa, xm2),
			L2_O(sent(xa, xb, xm1), xatt),
			implies(
				L2_O(sent(xa, xb, xm1), xatt),
				L2_O(sent(xa, xb, xm2), xatt))
		),
		and(
			Knows(xatt,xm1),
			Knows(xatt,xm2),
			Knows(xb,xm2),
			implies(
				Knows(xb, xm2),
				Knows(xb, xm1)),
			L2_Sender(xa,xb,xm1),
			L2_Sender(xa,xb,xm2)
		)
	)),
ReOrder_L2).


formula( forall ([xatt, xa, xb, xm1, xm2],
	implies(
		and(
			Attacker(xatt),
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Knows(xa, xm1),
			Knows(xa, xm2),
			L1_O(sent(xa, xb, xm1), xatt),
			implies(
				L1_O(sent(xa, xb, xm1), xatt),
				L1_O(sent(xa, xb, xm2), xatt))
		),
		and(
			Knows(xatt,xm1),
			Knows(xatt,xm2),
			Knows(xb,xm2),
			implies(
				Knows(xb, xm2),
				Knows(xb, xm1)),
			L1_Sender(xa,xb,xm1),
			L1_Sender(xa,xb,xm2)
		)
	)),
ReOrder_L1).


% ----------------------------------------------------------------------------------------

%Fabricate
formula( forall([xa, xb, xatt, xm],
	implies(
		and(
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Attacker(xatt),
			Knows(xa,xm),
			Function(hash(xm)),
			L3_F(sent(xa,xb,xm),xatt)
		),
		and(
			L3_Sender(xa,xb,xm),
			Knows(xatt,xm),
			Knows(xatt, hash(xm))
		)
	)),
Fabricate_L3).


formula( forall([xa, xb, xatt, xm],
	implies(
		and(
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Attacker(xatt),
			Knows(xa,xm),
			Function(hash(xm)),
			L2_F(sent(xa,xb,xm),xatt)
		),
		and(
			Knows(xatt, hash(xm)),
			Knows(xatt,xm),
			L2_Sender(xa,xb,xm)
		)
	)),
Fabricate_L2).


formula( forall([xa, xb, xatt, xm],
	implies(
		and(
			Agent(xa),
			Agent(xb),
			Honest(xa),
			Honest(xb),
			Attacker(xatt),
			Function(hash(xm)),
			L1_F(sent(xa,xb,xm),xatt)
		),
		and(
			Knows(xatt, hash(xm)),
			Knows(xatt,xm),
			L1_Sender(xa,xb,xm)
		)
	)),
Fabricate_L1).

% ------------------------------------------------------------------------------

formula(forall([xatt],
	implies(
		Attacker(xatt),
		Agent(xatt)
	)),
Attackers_are_Agents).




formula(Agent(s),agent_s).
formula(Honest(s),honest_s).
formula(Agent(up),agent_up).
formula(Honest(up),honest_up).
formula(Agent(uc),agent_uc).
formula(Honest(uc),honest_uc).

formula(Attacker(ma1),attacker_ma1).
formula(MA(ma1),MA_ma1).
formula(Attacker(dy),attacker_dy).
formula(DY(dy),DY_dy).
formula(Attacker(da1),attacker_da1).
formula(DA(da1),DA_da1).
formula(Attacker(da2),attacker_da2).
formula(DA(da2),DA_da2).
formula(Attacker(da3),attacker_da3).
formula(DA(da3),DA_da3).

formula(Key(keys),key_keys).

formula(Knows(uc,emailserverurl),agent_uc_knows_emailserverurl).
formula(KnowsEncr(uc,encr(emailserverurl,keys)),agent_uc_knows_encr_emailserverurl_and_keys).
formula(KnowsEncr(s,encr(emailloginpage,keys)),agent_s_knows_encr_emailloginpage_and_keys).
formula(Knows(s,emailloginpage),agent_s_knows_emailloginpage).
formula(KnowsPair(uc,pair(email,password)),agent_uc_knows_pair_email_and_password).
formula(KnowsEncr(uc,encr(pair(email,password),keys)),agent_uc_knows_encr_pair_email_and_password).
formula(KnowsEncr(s,encr(2stepverification,keys)),agent_s_knows_encr_2stepverification_and_keys).
formula(Knows(s,2stepverification),agent_s_knows_2stepverification).
formula(Knows(s,codemessage),agent_s_knows_codemessage).
formula(Knows(uc,authenticationcode),agent_uc_knows_authenticationcode).
formula(KnowsEncr(uc,encr(authenticationcode,keys)),agent_uc_knows_encr_authenticationcode_and_keys).
formula(KnowsEncr(s,encr(usersemailpage,keys)),agent_s_knows_encr_usersemailpage_and_keys).
formula(Knows(s,usersemailpage),agent_s_knows_usersemailpage).



formula(
	and(
		L3_E(sent(uc,s,emailserverurl),ma1),
		L3_E(sent(uc,s,emailserverurl),da3),
		L3_B(sent(uc,s,emailserverurl),da3)
	),
step1).

formula(
	implies(
		and(
			L3_E(sent(uc,s,emailserverurl),ma1),
			L3_E(sent(uc,s,emailserverurl),da3),
			L3_B(sent(uc,s,emailserverurl),da3)
		),
		L2_E(sent(uc,s,emailserverurl),da2)
	),
step2).

formula(
	implies(
		L2_E(sent(uc,s,emailserverurl),da2),
		and(
			L1_E(sent(uc,s,emailserverurl),dy),
			L1_B(sent(uc,s,emailserverurl),dy),
			L1_S(sent(uc,s,emailserverurl),dy),
			L1_I(sent(uc,s,emailserverurl),dy),
			L1_C(sent(uc,s,emailserverurl),dy),
			L1_O(sent(uc,s,emailserverurl),dy),
			L1_F(sent(uc,s,emailserverurl),dy)
		)
	),
step3).

formula(
	implies(
		and(
			L1_E(sent(uc,s,emailserverurl),dy),
			L1_B(sent(uc,s,emailserverurl),dy),
			L1_S(sent(uc,s,emailserverurl),dy),
			L1_I(sent(uc,s,emailserverurl),dy),
			L1_C(sent(uc,s,emailserverurl),dy),
			L1_O(sent(uc,s,emailserverurl),dy),
			L1_F(sent(uc,s,emailserverurl),dy)
		),
		and(
			L1_E(sent(s,uc,emailloginpage),dy),
			L1_B(sent(s,uc,emailloginpage),dy),
			L1_S(sent(s,uc,emailloginpage),dy),
			L1_I(sent(s,uc,emailloginpage),dy),
			L1_C(sent(s,uc,emailloginpage),dy),
			L1_O(sent(s,uc,emailloginpage),dy),
			L1_F(sent(s,uc,emailloginpage),dy)
		)
	),
step4).

formula(
	implies(
		and(
			L1_E(sent(s,uc,emailloginpage),dy),
			L1_B(sent(s,uc,emailloginpage),dy),
			L1_S(sent(s,uc,emailloginpage),dy),
			L1_I(sent(s,uc,emailloginpage),dy),
			L1_C(sent(s,uc,emailloginpage),dy),
			L1_O(sent(s,uc,emailloginpage),dy),
			L1_F(sent(s,uc,emailloginpage),dy)
		),
		L2_E(sent(s,uc,emailloginpage),da2)
	),
step5).

formula(
	implies(
		L2_E(sent(s,uc,emailloginpage),da2),
		and(
			L3_E(sent(s,uc,emailloginpage),da1),
			L3_B(sent(s,uc,emailloginpage),da1)
		)
	),
step6).

formula(
	implies(
		and(
			L3_E(sent(s,uc,emailloginpage),da1),
			L3_B(sent(s,uc,emailloginpage),da1)
		),
		and(
			L3_E(sent(uc,s,pair(email,password)),da1),
			L3_B(sent(uc,s,pair(email,password)),da1)
		)
	),
step7).

formula(
	implies(
		and(
			L3_E(sent(uc,s,pair(email,password)),da1),
			L3_B(sent(uc,s,pair(email,password)),da1)
		),
		L2_E(sent(uc,s,pair(email,password)),da2)
	),
step8).

formula(
	implies(
		L2_E(sent(uc,s,pair(email,password)),da2),
		and(
			L1_E(sent(uc,s,pair(email,password)),dy),
			L1_B(sent(uc,s,pair(email,password)),dy),
			L1_S(sent(uc,s,pair(email,password)),dy),
			L1_I(sent(uc,s,pair(email,password)),dy),
			L1_C(sent(uc,s,pair(email,password)),dy),
			L1_O(sent(uc,s,pair(email,password)),dy),
			L1_F(sent(uc,s,pair(email,password)),dy)
		)
	),
step9).

formula(
	implies(
		and(
			L1_E(sent(uc,s,pair(email,password)),dy),
			L1_B(sent(uc,s,pair(email,password)),dy),
			L1_S(sent(uc,s,pair(email,password)),dy),
			L1_I(sent(uc,s,pair(email,password)),dy),
			L1_C(sent(uc,s,pair(email,password)),dy),
			L1_O(sent(uc,s,pair(email,password)),dy),
			L1_F(sent(uc,s,pair(email,password)),dy)
		),
		and(
			L1_E(sent(s,uc,2stepverification),dy),
			L1_B(sent(s,uc,2stepverification),dy),
			L1_S(sent(s,uc,2stepverification),dy),
			L1_I(sent(s,uc,2stepverification),dy),
			L1_C(sent(s,uc,2stepverification),dy),
			L1_O(sent(s,uc,2stepverification),dy),
			L1_F(sent(s,uc,2stepverification),dy)
		)
	),
step10).

formula(
	implies(
		and(
			L1_E(sent(s,uc,2stepverification),dy),
			L1_B(sent(s,uc,2stepverification),dy),
			L1_S(sent(s,uc,2stepverification),dy),
			L1_I(sent(s,uc,2stepverification),dy),
			L1_C(sent(s,uc,2stepverification),dy),
			L1_O(sent(s,uc,2stepverification),dy),
			L1_F(sent(s,uc,2stepverification),dy)
		),
		L2_E(sent(s,uc,2stepverification),da2)
	),
step11).

formula(
	implies(
		L2_E(sent(s,uc,2stepverification),da2),
		and(
			L3_E(sent(s,uc,2stepverification),da1),
			L3_B(sent(s,uc,2stepverification),da1)
		)
	),
step12).

formula(
	implies(
		and(
			L3_E(sent(s,uc,2stepverification),da1),
			L3_B(sent(s,uc,2stepverification),da1)
		),
		and(
			L2_E(sent(s,up,codemessage),ma1),
			L2_B(sent(s,up,codemessage),ma1),
			L2_S(sent(s,up,codemessage),ma1),
			L2_I(sent(s,up,codemessage),ma1),
			L2_C(sent(s,up,codemessage),ma1),
			L2_O(sent(s,up,codemessage),ma1),
			L2_F(sent(s,up,codemessage),ma1),
			L2_E(sent(s,up,codemessage),da3),
			L2_B(sent(s,up,codemessage),da3),
			L2_S(sent(s,up,codemessage),da3),
			L2_I(sent(s,up,codemessage),da3),
			L2_C(sent(s,up,codemessage),da3),
			L2_O(sent(s,up,codemessage),da3),
			L2_F(sent(s,up,codemessage),da3)
		)
	),
step13).

formula(
	implies(
		and(
			L2_E(sent(s,up,codemessage),ma1),
			L2_B(sent(s,up,codemessage),ma1),
			L2_S(sent(s,up,codemessage),ma1),
			L2_I(sent(s,up,codemessage),ma1),
			L2_C(sent(s,up,codemessage),ma1),
			L2_O(sent(s,up,codemessage),ma1),
			L2_F(sent(s,up,codemessage),ma1),
			L2_E(sent(s,up,codemessage),da3),
			L2_B(sent(s,up,codemessage),da3),
			L2_S(sent(s,up,codemessage),da3),
			L2_I(sent(s,up,codemessage),da3),
			L2_C(sent(s,up,codemessage),da3),
			L2_O(sent(s,up,codemessage),da3),
			L2_F(sent(s,up,codemessage),da3)
		),
		and(
			L3_E(sent(s,up,codemessage),da1),
			L3_B(sent(s,up,codemessage),da1)
		)
	),
step14).

formula(
	implies(
		and(
			L3_E(sent(s,up,codemessage),da1),
			L3_B(sent(s,up,codemessage),da1)
		),
		and(
			L3_E(sent(uc,s,authenticationcode),da1),
			L3_B(sent(uc,s,authenticationcode),da1)
		)
	),
step15).

formula(
	implies(
		and(
			L3_E(sent(uc,s,authenticationcode),da1),
			L3_B(sent(uc,s,authenticationcode),da1)
		),
		L2_E(sent(uc,s,authenticationcode),da2)
	),
step16).

formula(
	implies(
		L2_E(sent(uc,s,authenticationcode),da2),
		and(
			L1_E(sent(uc,s,authenticationcode),dy),
			L1_B(sent(uc,s,authenticationcode),dy),
			L1_S(sent(uc,s,authenticationcode),dy),
			L1_I(sent(uc,s,authenticationcode),dy),
			L1_C(sent(uc,s,authenticationcode),dy),
			L1_O(sent(uc,s,authenticationcode),dy),
			L1_F(sent(uc,s,authenticationcode),dy)
		)
	),
step17).

formula(
	implies(
		and(
			L1_E(sent(uc,s,authenticationcode),dy),
			L1_B(sent(uc,s,authenticationcode),dy),
			L1_S(sent(uc,s,authenticationcode),dy),
			L1_I(sent(uc,s,authenticationcode),dy),
			L1_C(sent(uc,s,authenticationcode),dy),
			L1_O(sent(uc,s,authenticationcode),dy),
			L1_F(sent(uc,s,authenticationcode),dy)
		),
		and(
			L1_E(sent(s,uc,usersemailpage),dy),
			L1_B(sent(s,uc,usersemailpage),dy),
			L1_S(sent(s,uc,usersemailpage),dy),
			L1_I(sent(s,uc,usersemailpage),dy),
			L1_C(sent(s,uc,usersemailpage),dy),
			L1_O(sent(s,uc,usersemailpage),dy),
			L1_F(sent(s,uc,usersemailpage),dy),
			L1_E(sent(s,uc,usersemailpage),da1),
			L1_B(sent(s,uc,usersemailpage),da1),
			L1_S(sent(s,uc,usersemailpage),da1),
			L1_I(sent(s,uc,usersemailpage),da1),
			L1_C(sent(s,uc,usersemailpage),da1),
			L1_O(sent(s,uc,usersemailpage),da1),
			L1_F(sent(s,uc,usersemailpage),da1)
		)
	),
step18).

formula(
	implies(
		and(
			L1_E(sent(s,uc,usersemailpage),dy),
			L1_B(sent(s,uc,usersemailpage),dy),
			L1_S(sent(s,uc,usersemailpage),dy),
			L1_I(sent(s,uc,usersemailpage),dy),
			L1_C(sent(s,uc,usersemailpage),dy),
			L1_O(sent(s,uc,usersemailpage),dy),
			L1_F(sent(s,uc,usersemailpage),dy),
			L1_E(sent(s,uc,usersemailpage),da1),
			L1_B(sent(s,uc,usersemailpage),da1),
			L1_S(sent(s,uc,usersemailpage),da1),
			L1_I(sent(s,uc,usersemailpage),da1),
			L1_C(sent(s,uc,usersemailpage),da1),
			L1_O(sent(s,uc,usersemailpage),da1),
			L1_F(sent(s,uc,usersemailpage),da1)
		),
		L2_E(sent(s,uc,usersemailpage),da2)
	),
step19).

formula(
	implies(
		L2_E(sent(s,uc,usersemailpage),da2),
		and(
			L3_E(sent(s,uc,usersemailpage),da1),
			L3_B(sent(s,uc,usersemailpage),da1)
		)
	),
step20).




end_of_list.


list_of_formulae(conjectures).


formula(Knows(ma1,emailserverurl),attacker_ma1_knows_emailserverurl).
formula(Knows(da3,emailserverurl),attacker_da3_knows_emailserverurl).
formula(Knows(da2,emailserverurl),attacker_da2_knows_emailserverurl).
formula(KnowsEncr(dy,encr(emailserverurl,keys)),attacker_dy_knows_encr_emailserverurl_and_keys).
formula(KnowsEncr(dy,encr(emailloginpage,keys)),attacker_dy_knows_encr_emailloginpage_and_keys).
formula(Knows(da2,emailloginpage),attacker_da2_knows_emailloginpage).
formula(Knows(da1,emailloginpage),attacker_da1_knows_emailloginpage).
formula(KnowsPair(da1,pair(email,password)),attacker_da1_knows_pair_email_and_password).
formula(KnowsPair(da2,pair(email,password)),attacker_da2_knows_pair_email_and_password).
formula(KnowsPair(dy,pair(email,password)),attacker_dy_knows_pair_email_and_password).
formula(KnowsEncr(dy,encr(pair(email,password),keys)),attacker_dy_knows_encr_pair_email_and_password).
formula(KnowsEncr(dy,encr(2stepverification,keys)),attacker_dy_knows_encr_2stepverification_and_keys).
formula(Knows(da2,2stepverification),attacker_da2_knows_2stepverification).
formula(Knows(da1,2stepverification),attacker_da1_knows_2stepverification).
formula(Knows(ma1,codemessage),attacker_ma1_knows_codemessage).
formula(Knows(da3,codemessage),attacker_da3_knows_codemessage).
formula(Knows(da1,codemessage),attacker_da1_knows_codemessage).
formula(Knows(da1,authenticationcode),attacker_da1_knows_authenticationcode).
formula(Knows(da2,authenticationcode),attacker_da2_knows_authenticationcode).
formula(KnowsEncr(dy,encr(authenticationcode,keys)),attacker_dy_knows_encr_authenticationcode_and_keys).
formula(KnowsEncr(dy,encr(usersemailpage,keys)),attacker_dy_knows_encr_usersemailpage_and_keys).
formula(KnowsEncr(da1,encr(usersemailpage,keys)),attacker_da1_knows_encr_usersemailpage_and_keys).
formula(Knows(da2,usersemailpage),attacker_da2_knows_usersemailpage).
formula(Knows(da1,usersemailpage),attacker_da1_knows_usersemailpage).


end_of_list.

end_problem.
